<?php

function wmod_menu() {
  $items = array();
  
  $items['admin/settings/wmod'] = array(
    'title' => 'WMod',
    'page callback' => 'wmod_view_page',
    'access arguments' => array('access content'),
  );
  $items['admin/settings/wmod/list'] = array(
    'title' => 'List Imports',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/wmod/add'] = array(
    'title' => 'Add Import',
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wmod_form'),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/wmod/%'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wmod_form', 3),
    'access callback' => 'wmod_access_edit_page',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/settings/wmod/%/settings'] = array(
    'title' => 'Edit Import Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/settings/wmod/%/import'] = array(
    'title' => 'Import!',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wmod_import_form', 3),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  
  $items['wmod_js/scan_ahah'] = array(
    'page callback' => 'wmod_scan_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['wmod_js/scan_interval'] = array(
    'page callback' => 'wmod_scan_interval',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['wmod_js/update_ahah'] = array(
    'page callback' => 'wmod_update_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['wmod_js/update_interval'] = array(
    'page callback' => 'wmod_update_interval',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function wmod_view_page() {
  $wmods = wmod_load('all');

  $header = array('Import Title');
  $rows = array();
  if (!empty($wmods)){
    foreach ($wmods as $wmod){
      $row = array(
        l($wmod['title'], 'admin/settings/wmod/'.$wmod['wmid'], array('absolute' => TRUE)),
      );
      $rows[] = $row;
    }
  }
  else {
    $row = array(
      'Sorry, no WMod Imports have been created yet.',
    );
    $rows[] = $row;
  }
  $row = array('');
  
  return theme('table', $header, $rows);
}

// Turns the url into a relative path... relative to the base_url
function wmod_parse_url($tmp_url, $path, $url) {
  // Remove the base url.
  if (strpos($tmp_url, $url) === 0) {
    $tmp_url = str_replace($url, '', $tmp_url);
  }

  // Check if it valid, snip accordingly.
  if (strpos($tmp_url, 'javascript:') === 0 ||
      strpos($tmp_url, '#') === 0 ||
      strpos($tmp_url, 'mailto:') === 0 ||
      strpos($tmp_url, 'mms:') === 0 || 
      strpos($tmp_url, 'http:') === 0 || 
      strpos($tmp_url, 'https:') === 0) {
    $tmp_url = '';
  }
  
  // Start with trailing.
  if (strrpos($tmp_url, '/') == (strlen($tmp_url) - 1)) {
    $tmp_url = substr($tmp_url, 0, -1);
  }
  // Then check for pre slash, absolute path.
  if (strpos($tmp_url, '/') === 0) {
    $tmp_url = substr($tmp_url, 1);
  }
  // Check for ../ paths
  else if (strpos($tmp_url, '../') === 0) {
    $path_bits = explode('/', $path);
    // If our path has a file on the end of it... we don't want it.
    if (strpos($path_bits[count($path_bits) - 1], '.')) {
      array_pop($path_bits);
    }
    $tmp_bits = explode('/', $tmp_url);
    $tmp_bit_counts = array_count_values($tmp_bits);
    // For every dot.dot, let's pop and shift out arrays.
    for ($i = 0; $i < $tmp_bit_counts[".."]; $i++) {
      array_shift($tmp_bits);
      array_pop($path_bits);
    }
    // Now let's put it all together.
    $tmp_url = implode('/',array_merge($path_bits, $tmp_bits));
  }
  // Check for realative path, which means if we're not on the homepage.
  else if ($path != $url) {
    $path_bits = explode('/', $path);
    // If our path has a file on the end of it... we don't want that element.
    if (strpos($path_bits[count($path_bits) - 1], '.')) {
      array_pop($path_bits);
    }
    $tmp_url = implode('/', array_merge($path_bits,array($tmp_url)));
  }
  // Start with trailing.
  if (strrpos($tmp_url, '/') == (strlen($tmp_url) - 1)) {
    $tmp_url = substr($tmp_url, 0, -1);
  }
  // Then check for pre slash, absolute path.
  if (strpos($tmp_url, '/') === 0) {
    $tmp_url = substr($tmp_url, 1);
  }

  if ($tmp_url) {
    return $url.'/'.$tmp_url;
  }
  else {
    return FALSE;
  }
}

function wmod_update_pages($wm) {
  // Find our time limit, start timer.
  $timelimit = ini_get('max_execution_time');
  $start = microtime(TRUE);
  $end = ($timelimit / 2) + microtime(TRUE);
  
  // Set vars.
  // Get the URLS we're working on.
  $urls = wmod_get_updatable_urls($wm['wmid']);
  // If we have paths, start it up
  $stop = empty($urls) ? TRUE : FALSE;
  while (!$stop){
    // Check each of the available urls
    $url = array_shift($urls);

    wmod_update_page($wm, $url);

    wmod_set_up_int_per($wm['wmid']);
    $per = wmod_get_up_int_per();

    // If time is up, or if percent is 100.
    if ($end < microtime(TRUE) || $per == 100 || empty($urls)) {
      $stop = TRUE;
    }
  }
}

function wmod_update_page($wm, $url) {
  // Get vars ready
  $page = wmod_get_url($url, $wm['wmid']);
  $path = str_replace($wm['base_url'].'/', '', $page['path']);  
  $info = unserialize($page['imported_info']);    
  $field_names = element_children($info);
  $fields = array();  
  foreach ($field_names as $field_name) {
    $fields[$field_name] = $info[$field_name]['xpath'];
  }

  // "Preview" page again...
  $results = wmod_preview_page($wm, $page['wmurl_id'], $fields);
  
  // Get node
  $node = node_load($info['#nid']);
  
  // Update fields
  foreach (array_filter($results[$path]) as $field => $val) {
    if ($field != 'title'){
      $node->{$field}[0]['value'] = $val['content'];
    }
    else {
      $node->title = $val['content'];
    }
  }
  
  // Save node
  node_save($node);
  
  // Update URL info
  $url_data['updated'] = array(
    'holder' => '%d',
    'val' => 1,
  );
  wmod_update_link($url, $wm['wmid'], $url_data);
}

function wmod_scan_pages($wm) {
  // Find our time limit, start timer.
  $timelimit = ini_get('max_execution_time');
  $start = microtime(TRUE);
  $end = ($timelimit / 2) + microtime(TRUE);
  
  // Set vars.
  // Get the URLS we're working on.
  $urls = wmod_get_avail_urls($wm['wmid']);
  // If we have paths, start it up
  $stop = empty($urls) ? TRUE : FALSE;
  while (!$stop){
    // Check each of the available urls
    $url = array_shift($urls);

    // Scan the page.
    $page_urls = wmod_scan_page($wm, $url);
    // If there were no errors, we should probably be adding pages.
    if ($page_urls) {
      wmod_add_links($page_urls, $wm['wmid']);
    }

    wmod_set_scan_int_per($wm['wmid']);
    $per = wmod_get_scan_int_per();

    // If time is up, or if percent is 100.
    if ($end < microtime(TRUE) || $per == 100) {
      $stop = TRUE;
    }
    // If we're not done... let's try to get some more URLs!
    else if (empty($urls)) {
      $urls = wmod_get_avail_urls($wm['wmid']);
    }
  }
}

function wmod_scan_page($wm, $url) {
  // Set vars
  $page_urls = array();
  $path = str_replace($wm['base_url'], '', $url);
  $path = $wm['base_url'] == $url ? '' : substr($path, 1);
  
  $html = htmlqp($url)->html();

  // Get all a tags.
  // Thanks Querypath!
  foreach (htmlqp($html, 'a') as $a) {
    // Then their href attributes.
    $page_url = wmod_parse_url(trim($a->attr('href')), $path, $wm['base_url']);
    // Make sure there is something there.
    if ($page_url) {
      // Find out what type it is.
      $type = wmod_find_type($page_url);
      // Add page to array.
      $page_urls[] = array(
        'url' => $page_url,
        'type' => $type,
      );
    }
  }
  // Update the link we just scanned.
  $url_data = array(
    'error' => array(
      'holder' => '%d',
      'val' => empty($page_urls) ? 1 : 0,
    ),
    'scanned' => array(
      'holder' => '%d',
      'val' => 1,
    ),
    'html' => array(
      'holder' => '"%s"',
      'val' => serialize($html),
    ),
  );
  wmod_update_link($url, $wm['wmid'], $url_data);
  
  return $page_urls;
}

function wmod_find_type($url){
  $ext = substr(strtolower(array_pop(explode('.', $url))), 0, 3);

  // Define types.
  $html = array('htm', 'php');
  $img = array('jpe', 'jpg', 'gif', 'png', 'tif');
  $doc = array('doc', 'pdf');
  $feed = array('xml');
  
  if (in_array($ext, $html)) {
    return 'html';
  }
  else if (in_array($ext, $img)) {
    return 'img';
  }
  else if (in_array($ext, $doc)) {
    return 'doc';
  }
  else if (in_array($ext, $feed)) {
    return 'feed';
  }
  // If there's no extension.. we can only assume it's an html page.
  else {
    return 'html';
  }
  
}

function wmod_preview_page($wm, $wmurl_id, $fields){
  $url = wmod_get_url($wmurl_id, $wm['wmid']);
  $path = str_replace($wm['base_url'].'/', '', $url['path']);
  $image_urls = array();
  $page = htmlqp(unserialize($url['html']));
  $results = array();
  $results['#info']['#url'] = $url['path'];

  foreach (array_filter($fields) as $field => $xpath) {
    $result = $page->find($xpath);
    // save original HTML to results array
    if ($field == 'title') {
      $results['#info'][$field]['content'] = $result->top()->find($xpath)->text();
    }
    else {
      $results['#info'][$field]['content'] = $result->top()->find($xpath)->innerHTML();
    }
    $results['#info'][$field]['field'] = $wm['cont_type']['fields'][$field.'__xpath']['info'];
    $results['#info'][$field]['xpath'] = $xpath;


    // Search for images... then change the paths on the img-src attribs
    foreach ($result->top()->find($xpath)->find('img') as $img) {
      $img_path = trim($img->attr('src'));
      $img_path = array_shift(explode('?', $img_path));
      $img_path = array_shift(explode('#', $img_path));
      $img_path = wmod_parse_url($img_path, $path, $wm['base_url']);
      // Make sure there is something there.
      if (!empty($img_path)) {
        // Find out what type it is.
        $type = wmod_find_type($img_path);
        // Save it.
        if ($type == 'img') {
          $fid = FALSE;
          $file_temp = NULL;
          // See if this image was already imported
          $img_link = wmod_get_url($img_path);
          if (isset($img_link['imported_info'])) {
            $fid = unserialize($img_link['imported_info']);
            $fid = $fid['#fid'];
            
            $sql = '';
            $sql .= 'SELECT f.filepath ';
            $sql .= 'FROM {files} f ';
            $sql .= 'WHERE f.fid=%d ';
            
            $rel_path = db_result(db_query($sql, $fid));

            global $base_url;
            // Change src attribute to new "relative" path.
            $img->attr('src', $base_url.'/'.$rel_path);
          }
          
          // If we don't have a valid fid, then we probs havn't imported the file
          if (!is_numeric($fid)) {
            // Set the full path on the server
            $filename = basename($img_path);
            $doc_root = $_SERVER['DOCUMENT_ROOT'];
            $rel_path = file_directory_path().'/wm_import/'.$filename;
            $fullpath = $rel_path;
            $file_temp = file_get_contents($img_path);
            $file_temp = file_save_data($file_temp, $fullpath);
          }
          
          // If we saved the file... let's do some more stuff.
          if ($file_temp) {
            global $user;
            global $base_url;
            // Change src attribute to new "relative" path.
            $img->attr('src', $base_url.'/'.$rel_path);

            // Add file to files table
            $file = $rel_path;        
            // Get the file size
            $details = stat($file);
            $filesize = $details['size'];
        
            // Build the file object
            $file_obj = new stdClass();
            $file_obj->filename = $filename;
            $file_obj->filepath = $file;
            $file_obj->filemime =  file_get_mimetype($filename);
            $file_obj->filesize = $filesize;
            $file_obj->filesource = $filename;
            // You can change this to the UID you want
            $file_obj->uid = $user->uid;
            $file_obj->status = FILE_STATUS_PERMANENT;
            $file_obj->timestamp = time();
            $file_obj->list = 1;
            $file_obj->new = true;
        
            // Save file to files table
            drupal_write_record('files', $file_obj);
            
            // Update link info
            wmod_add_link($img_path, $wm['wmid'], 'img');
            $img_data = array(
              'scanned' => array(
                'holder' => '%d',
                'val' => 1,
              ),
              'imported' => array(
                'holder' => '%d',
                'val' => 1,
              ),
              'imported_info' => array(
                'holder' => '"%s"',
                'val' => serialize(array('#fid' => $file_obj->fid)),
              ),
            );
            wmod_update_link($img_path, $wm['wmid'], $img_data);
          }
        }
      }
    }

    // Search for images... then change the paths on the img-src attribs
    foreach ($result->top()->find($xpath)->find('a') as $link) {
      $link_path = trim($link->attr('href'));
      $link_path = wmod_parse_url($link_path, $path, $wm['base_url']);
      
      // See if we have a full link...
      if ($link_path) {
        $nid = FALSE;
        // Try and load link
        $link_link = wmod_get_url($link_path, $wm['wmid']);
        
        // See if we've already imported it, then get the nid
        if (isset($link_link['imported']) && $link_link['imported']) {
          $nid = unserialize($link_link['imported_info']);
          $nid = $nid['#nid'];
        }
        else {
          // let's point the link to the AB url to prevent dead links
          $link->attr('href', $link_path);
        }
        
        if (is_numeric($nid)) {
          // Lets update the href to our existing node
          $link->attr('href', url('node/'.$nid, array('absolute' => TRUE)));
        }
      }
    }

    // save new HTML to results array
    if ($field == 'title') {
      $results[$path][$field]['content'] = $result->top()->find($xpath)->text();
    }
    else {
      $results[$path][$field]['content'] = $result->top()->find($xpath)->innerHTML();
    }
    $results[$path][$field]['field'] = $wm['cont_type']['fields'][$field.'__xpath']['info'];
  }
  return $results;
}

function wmod_save_node($values, $wm, $info) {
  // These are the form elements we care about.
  $settings = array(
    //'menu', We don't want to adjust the menu values
    //'path', Or path... we'll handle that manually
    'options',
    'revision_information',
    'author',
    'comment_settings',
  );
  
  $values['path'] = $values['path']['path'];
  // Fix values array
  foreach ($values as $key => $val) {
    if (in_array($key, $settings)) {
      foreach ($val as $ikey => $ival) {
        $values[$ikey] = $ival;
      }
      unset($values[$key]);
    }
  }
  unset ($val);
  $form_state = array();
  module_load_include('inc', 'node', 'node.pages');  // new for Drupal 6
  $node = array('type' => $wm['cont_type']['type']); // a variable holding the content type
  $node = node_prepare((object)$node);

  $form_state['values']['type'] = $wm['cont_type']['type'];
  $form_state['values']['status'] = 1;
  $form_state['values']['op'] = t('Save');
  foreach ($values as $key => $val) {
    $key = str_replace('__xpath', '', $key);
    $form_state['values'][$key] = $val;
  }
  
  // call the function to create the node, node_revisions, and CCK values.
  // Replace "story" with the name of your form / content type
  $errs = drupal_execute($wm['cont_type']['type'].'_node_form', $form_state, $node);
  $url_data = array();

  // Since we most likely now have a new nid... let's update the link data
  if ($form_state['nid']) {
    $info['#nid'] = $form_state['nid'];
    $url_data['imported'] = array(
      'holder' => '%d',
      'val' => 1,
    );
    $url_data['imported_info'] = array(
      'holder' => '"%s"',
      'val' => serialize($info),
    );
    wmod_update_link($info['#url'], $wm['wmid'], $url_data);

    return TRUE;
  }
  else {
    return FALSE;
  }
}

function wmod_import_form_submit($form, &$form_state){
  return;
}

function wmod_import_form(&$form_state, $wmid = NULL){
  $form = array();
  $wm = array_shift(wmod_load($wmid));
  // Set blank menu item for saving a node
  $menu_item = array(
    'link_title' => '',
    'mlid' => 0,
    'plid' => 0,
    'menu_name' => $menu_name,
    'weight' => 0,
    'options' => array(),
    'module' => 'menu',
    'expanded' => 0,
    'hidden' => 0,
    'has_children' => 0,
    'customized' => 0
  );

  ahah_helper_register($form, $form_state);
  // AHAH stuff
  if ($form_state['submitted'] && strpos($form_state['clicked_button']['#value'], 'Preview') === 0) {
    $clicked_button = str_replace('Preview ', '', $form_state['clicked_button']['#value']);
    $clicked_path = $form_state['values']['urls'][$clicked_button]['info']['wmod_original_path'];
    $fields = array();
    foreach ($form_state['values']['urls'][$clicked_button]['settings']['xpaths'] as $key => $val) {
      $fields[str_replace('__xpath', '', $key)] = $val;
    }
    $defaults = wmod_preview_page($wm, $clicked_button, $fields);
    $urls = array($clicked_button => $wm['base_url'].'/'.$clicked_path);
  }
  else if ($form_state['submitted'] && strpos($form_state['clicked_button']['#value'], 'Save') === 0) {
    $clicked_button = str_replace('Save ', '', $form_state['clicked_button']['#value']);
    $clicked_path = $form_state['values']['urls'][$clicked_button]['info']['wmod_original_path'];
    unset($form_state['values']['urls'][$clicked_button]['settings']['xpaths']);
    $values = array_merge($form_state['values']['urls'][$clicked_button]['preview_area'], $form_state['values']['urls'][$clicked_button]['settings']);
    $form_state['values']['wmod_info']['#url'] = $wm['base_url'].'/'.$clicked_path;
    $saved = wmod_save_node($values, $wm, $form_state['values']['wmod_info']);
    $urls = array($clicked_button => $wm['base_url'].'/'.$clicked_path);
  }
  // non-AHAH stuff
  else {
    $hide_imported = isset($form_state['values']['hide_imported']) ? $form_state['values']['hide_imported'] : TRUE;
    $urls = wmod_get_html_urls($wm['wmid'], $hide_imported);
    if (empty($urls)) {
      $form['no_dice']['#value'] = "No URLs, please try to rescan... or something.";
      return $form;
    }
  }
  
  // Add something to the storage so that the form never actually submits
  $form_state['storage']['anything'] = TRUE;

  $form['hide_imported'] = array(
    '#type' => 'checkbox',
    '#title' => 'Hide imported paths',
    '#default_value' => $hide_imported,
  );
  $form['update'] = array(
    '#type' => 'submit',
    '#value' => 'Update',
  );
  $form['urls'] = array(
    '#type' => 'fieldset',
    '#title' => 'URLs',
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );
  foreach($urls as $i => $url) {
    $path = str_replace($wm['base_url'].'/', '', $url);
    $form['urls']['pager'] = array(
      '#type' => 'item',
      '#value' => theme('pager'),
    );
    $form['urls'][$i] = array(
      '#type' => 'fieldset',
      '#title' => $path ? $path : $url,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['urls'][$i]['link'] = array(
      '#type' => 'item',
      '#value' => 'Link: '.l($url, $url, array('attributes' => array('target' => '_blank'))),
    );
    $form['urls'][$i]['settings'] = array(
      '#type' => 'fieldset',
      '#title' => 'Settings',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['urls'][$i]['settings']['xpaths'] = array(
      '#weight' => -10,
      '#type' => 'fieldset',
      '#title' => 'XPath',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach ($wm['cont_type']['fields'] as $key => $val) {
      $form['urls'][$i]['settings']['xpaths'][$key] = array(
        '#type' => 'textfield',
        '#title' => $val['label'].' XPath',
        '#default_value' => $val['xpath'],
      );
    }
    $form['urls'][$i]['settings'] += $wm['cont_type']['settings'];
    $form['urls'][$i]['info']['wmod_original_path'] = array(
      '#type' => 'value',
      '#value' => $path,
    );
    $form['urls'][$i]['preview_area'] = array(
      '#type' => 'item',
      '#prefix' => '<div id="preview-'.$i.'">',
      '#suffix' => '</div>',
    );

    // Previewing the node.
    if (isset($defaults) && $clicked_path == $path){
      module_load_include('inc', 'content', 'includes/content.node_form');
      $form['urls'][$i]['#collapsed'] = FALSE;
      foreach ($defaults[$clicked_path] as $key => $val) {
        if ($key != 'title') {
          $form['#field_info'][$key] = $val['field'];
          //$form_state['values'][$key] = $val['content'];
          $elem = content_field_form($form, $form_state, $val['field']);
          $form_state['values'][$key] = $form_state['values']['urls'][$i]['preview_area'][$key];
          $form_state['values'][$key][0]['value'] = $val['content'];
          $elem = content_field_form($form, $form_state, $val['field']);
          $form['urls'][$i]['preview_area'][$key] = $elem[$key];
        }
        else {
          $form['urls'][$i]['preview_area'][$key] = $val['field'];
          $form['urls'][$i]['preview_area'][$key]['#default_value'] = $val['content'];
        }
      }

      // We just save the node :)
      if (isset($saved) && $saved){
        $form['urls'][$i]['preview_area']['saved'] = array(
          '#type' => 'item',
          '#title' => 'Saved!',
        );
      }
      else if (isset($saved) && !$saved){
        $form['urls'][$i]['preview_area']['saved'] = array(
          '#type' => 'item',
          '#title' => 'Save error!',
        );
      }
      
      // Add meta info about the import
      $form['wmod_info'] = array(
        '#type' => 'value',
        '#value' => $defaults['#info'],
      );
    }
    $form['urls'][$i]['preview'] = array(
      '#type' => 'submit',
      '#submit' => array('ahah_helper_generic_submit'),
      '#value' => 'Preview '.$i,
      '#ahah' => array(
        'path' => ahah_helper_path(array('urls', $i, 'preview_area')),
        'wrapper' => 'preview-'.$i,
        'method' => 'replace',
      ),
    );
    $form['urls'][$i]['submit'] = array(
      '#type' => 'submit',
      '#submit' => array('ahah_helper_generic_submit'),
      '#value' => 'Save '.$i,
      '#ahah' => array(
        'path' => ahah_helper_path(array('urls', $i, 'preview_area')),
        'wrapper' => 'preview-'.$i,
        'method' => 'replace',
      ),
    );
  }
  return $form;
}

function wmod_form(&$form_state, $wmid = NULL){
  $form = array();
  $wm = array_shift(wmod_load($wmid));
  // Set blank menu item.
  $menu_item = array(
    'link_title' => '',
    'mlid' => 0,
    'plid' => 0,
    'menu_name' => $menu_name,
    'weight' => 0,
    'options' => array(),
    'module' => 'menu',
    'expanded' => 0,
    'hidden' => 0,
    'has_children' => 0,
    'customized' => 0
  );
  // If we're just starting up an index... add the first value.
  $page_path = wmod_get_all_paths($wm['wmid'], 1);
  if (empty($page_path) && !empty($wm)){
    wmod_add_link($wm['base_url'], $wm['wmid'], 'html');
  }
  // Our AHAH scan stuff starts here.
  if ($form_state['submitted'] && $form_state['clicked_button']['#value'] == t('Scan')) {
    wmod_scan_pages($wm);
  }
  // Our AHAH scan stuff starts here.
  if ($form_state['submitted'] && $form_state['clicked_button']['#value'] == t('Reset Scan Data')) {
    wmod_reset_paths($wm['wmid']);
    wmod_add_link($wm['base_url'], $wm['wmid'], 'html');
  }
  // Our AHAH update stuff starts here.
  if ($form_state['submitted'] && $form_state['clicked_button']['#value'] == t('Update')) {
    wmod_update_pages($wm);
  }
  // Our AHAH update stuff starts here.
  if ($form_state['submitted'] && $form_state['clicked_button']['#value'] == t('Reset Update Status')) {
    wmod_reset_update_status($wm['wmid']);
  }

  $results = wmod_get_results($wm['wmid']);

  // Build form
  $form['#cache'] = TRUE;
  $form['#redirect'] = 'admin/settings/wmod';
  $form['#submit'] = array('wmod_form_submit');
  $form['url'] = array(
    '#type' => 'fieldset',
    '#title' => 'Base URL Settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['url']['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
    '#description' => t('This is just a title for admin purposes... so, go ahead and code-name this project <em>Snake-eyes</em>. It doesn\'t really matter.'),
    '#maxlength' => 127,
    '#required' => TRUE,
    '#default_value' => $wm['title'],
  );
  $form['url']['base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('This is the URL you will be starting from. Should be like: <em>http://google.com</em>
          <br /><strong>NOTE:</strong> <em>Please, NO trailing slash! Max limit: 128 chars</em>'),
    '#maxlength' => 128,
    '#required' => TRUE,
    '#default_value' => $wm['base_url'],
  );
  $form['xpath'] = array(
    '#type' => 'fieldset',
    '#title' => 'Node Settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['xpath']['content_type'] = array(
    '#type' => 'select',
    '#title' => 'Content Type',
    '#options' => node_get_types('names'),
    '#default_value' => $wm['cont_type']['type'],
  );
  if ($wm) {
    $form['url']['scan'] = array(
      '#type' => 'submit',
      '#submit' => array('ahah_helper_generic_submit'),
      '#value' => t('Scan'),
      '#ahah' => array(
        'path' => 'wmod_js/scan_ahah',
        'wrapper' => 'wmod-results',
        'method' => 'replace',
        'progress' => array(
          'type' => 'bar',
          'message' => t('Crawling...'),
          'interval' => 1,
          'url' => url('', array('absolute' => TRUE)).'wmod_js/scan_interval/?wmid='.$wm['wmid'],
        )
      ),
    );
    $form['url']['reset'] = array(
      '#type' => 'submit',
      '#submit' => array('ahah_helper_generic_submit'),
      '#value' => t('Reset Scan Data'),
      '#ahah' => array(
        'path' => ahah_helper_path(array('url', 'results')),
        'wrapper' => 'wmod-results',
        'method' => 'replace',
      ),
    );
    $form['url']['style_clear'] = array(
      '#value' => '<div style="clear:both;"></div>',
    );
    $form['wmid'] = array(
      '#type' => 'value',
      '#value' => $wm['wmid'],
    );
    if (isset($results)){
      $form['url']['results'] = array(
        '#type' => 'fieldset',
        '#title' => t('Results'),
        '#collapsible' => TRUE,
        '#prefix' => '<div id="wmod-results">',
        '#suffix' => '</div>',
      );
      foreach($results as $key => $val) {
        $form['url']['results'][$key] = array(
          '#type' => 'item',
          '#title' => $key.' = '.$val,
        );
      }
    }

// ===================================

    $form['url']['update'] = array(
      '#type' => 'submit',
      '#submit' => array('ahah_helper_generic_submit'),
      '#value' => t('Update'),
      '#ahah' => array(
        'path' => 'wmod_js/update_ahah',
        'wrapper' => 'wmod-results',
        'method' => 'replace',
        'progress' => array(
          'type' => 'bar',
          'message' => t('Updating...'),
          'interval' => 1,
          'url' => url('', array('absolute' => TRUE)).'wmod_js/update_interval/?wmid='.$wm['wmid'],
        )
      ),
    );
    $form['url']['reset_update'] = array(
      '#type' => 'submit',
      '#submit' => array('ahah_helper_generic_submit'),
      '#value' => t('Reset Update Status'),
      '#ahah' => array(
        'path' => ahah_helper_path(array('url', 'results')),
        'wrapper' => 'wmod-results',
        'method' => 'replace',
      ),
    );


// ===================================

    $form['xpath']['settings'] = $wm['cont_type']['settings'];
    $form['xpath']['settings']['xpath'] = array(
      '#weight' => -10,
      '#type' => 'fieldset',
      '#title' => 'XPath',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach ($wm['cont_type']['fields'] as $key => $val) {
      $form['xpath']['settings']['xpath'][$key] = array(
        '#type' => 'textfield',
        '#description' => "jQuery/CSS style selectors!",
        '#title' => $val['label'].' XPath',
        '#default_value' => $val['xpath'],
      );
    }
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 10,
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function wmod_form_submit($form, &$form_state) {
  // Are we deleting?
  if ($form_state['clicked_button']['#value'] == t('Delete')) {
    wmod_delete($form_state['values']['wmid']);
    return;
  }
  $type = $form_state['values']['content_type'];
  // Set info for content types.

  // Get a sample form for the content type
  module_load_include('inc', 'node', 'node.pages');
  $sample_node = new stdClass();
  //$sample_fs = array();
  $sample_node->type = $type;
  $sample_form = node_form($form_state, $sample_node);
  drupal_prepare_form($type.'_node_form', $sample_form, $form_state);

  // These are the form elements we care about.
  $settings = array(
    'menu',
    'path',
    'options',
    'revision_information',
    'author',
    'comment_settings',
  );
  // Add each of those settings to the content type info
  foreach($sample_form as $key => $val) {
    if (in_array($key, $settings)) {
      $cont_type_info['settings'][$key] = $val;
      if (isset($form_state['values']['menu'])) {
        switch ($key) {
          case 'menu':
            $cont_type_info['settings'][$key]['mlid']['#default_value'] = $form_state['values']['menu']['mlid'];
            $cont_type_info['settings'][$key]['module']['#default_value'] = $form_state['values']['menu']['module'];
            $cont_type_info['settings'][$key]['hidden']['#default_value'] = $form_state['values']['menu']['hidden'];
            $cont_type_info['settings'][$key]['has_children']['#default_value'] = $form_state['values']['menu']['has_children'];
            $cont_type_info['settings'][$key]['customized']['#default_value'] = $form_state['values']['menu']['customized'];
            $cont_type_info['settings'][$key]['options']['#default_value'] = $form_state['values']['menu']['options'];
            $cont_type_info['settings'][$key]['parent_depth_limit']['#default_value'] = $form_state['values']['menu']['parent_depth_limit'];
            $cont_type_info['settings'][$key]['link_title']['#default_value'] = $form_state['values']['menu']['link_title'];
            $cont_type_info['settings'][$key]['parent']['#default_value'] = $form_state['values']['menu']['parent'];
            $cont_type_info['settings'][$key]['weight']['#default_value'] = $form_state['values']['menu']['weight'];
          break;
          case 'path':
            $cont_type_info['settings'][$key]['path']['#default_value'] = $form_state['values']['path'];
          break;
          case 'options':
            $cont_type_info['settings'][$key]['status']['#default_value'] = $form_state['values']['status'];
            $cont_type_info['settings'][$key]['promote']['#default_value'] = $form_state['values']['promote'];
            $cont_type_info['settings'][$key]['sticky']['#default_value'] = $form_state['values']['sticky'];
          break;
          case 'revision_information':
            $cont_type_info['settings'][$key]['revision']['#default_value'] = $form_state['values']['revision'];
            $cont_type_info['settings'][$key]['log']['#default_value'] = $form_state['values']['log'];
          break;
          case 'author':
            $cont_type_info['settings'][$key]['name']['#default_value'] = $form_state['values']['name'];
          break;
          case 'comment_settings':
            $cont_type_info['settings'][$key]['comment']['#default_value'] = $form_state['values']['comment'];
          break;
        }
      }
    }
  }
  $cont_type_info['type'] = $type;

  // Define "title"... it's a special field :)
  $cont_type_info['fields']['title__xpath']['info'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
  );
  $cont_type_info['fields']['title__xpath']['label'] = 'Title';
  $cont_type_info['fields']['title__xpath']['xpath'] = isset($form_state['values']['title__xpath']) ? $form_state['values']['title__xpath'] : '';

  $cck_info = _content_type_info();
  foreach ($cck_info['content types'][$cont_type_info['type']]['fields'] as $key => $field) {
    $cont_type_info['fields'][$key.'__xpath']['info'] = $field;
    $cont_type_info['fields'][$key.'__xpath']['label'] = $field['widget']['label'];
    $cont_type_info['fields'][$key.'__xpath']['xpath'] = isset($form_state['values'][$key.'__xpath']) ? $form_state['values'][$key.'__xpath'] : '';
  }

  // Set array for defaults.
  $fields = array(
    'wmid' => '',
    'title' => '',
    'base_url' => '',
    'ignore' => '',
    'content_type_info' => '',
  );
  $inserts = array();
  
  // Set defaults.
  foreach($fields as $key => $val) {
    $inserts['fields'][$key] = $key;
    $inserts['holders'][$key] = '"%s"';
    $inserts['vals'][$key] = $val;
  }
  $inserts['holders']['wmid'] = '%d';
  // Serialize data
  $inserts['vals']['content_type_info'] = serialize($cont_type_info);
  
  // Use values.
  foreach($form_state['values'] as $key => $val) {
    if (in_array($key, $inserts['fields'])) {
      $inserts['vals'][$key] = $val;
    }
  }
  
  if ($inserts['vals']['wmid']) {
    $sql = '';
    $sql .= 'UPDATE {wmod} ';
    $sql .= 'SET ';
    $vals = array();
    foreach ($inserts['fields'] as $key => $val) {
      $vals[] = ('`'.$key.'`='.$inserts['holders'][$key]);
    }
    $sql .= implode(', ', $vals);
    $sql .= ' WHERE wmid=%d';
    db_query($sql, array_merge($inserts['vals'], array($inserts['vals']['wmid'])));  
  }
  else {
    $sql = '';
    $sql .= 'INSERT INTO {wmod} ';
    $sql .= '(`'.implode('`, `',$inserts['fields']).'`) ';
    $sql .= 'VALUES ('.implode(', ',$inserts['holders']).') ';
    db_query($sql, $inserts['vals']);
  }
  drupal_set_message("Import settings saved.");
}

function wmod_scan_ahah() {
  // Standard AHAH stuff.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  // Get the part of the form we're returning.
  $results_fieldset = $form['url']['results'];
  unset($results_fieldset['#prefix'], $results_fieldset['#suffix']);
  $output = theme('status_messages') . drupal_render($results_fieldset);
  drupal_json(array('status' => TRUE, 'data' => $output));
}

function wmod_scan_interval() {
  $wmid = isset($_GET['wmid']) ? $_GET['wmid'] : FALSE;
  // Get percentage.
  $per = wmod_get_scan_int_per();

  // If we can get result data... get it!
  if ($wmid) {
    $results = wmod_get_results($wmid);
    $msg = "Crawling ".$results['scanned']." of ".$results['html'];
    drupal_json(array('percentage' => $per, 'message' => $msg));
  }
  else {
    drupal_json(array('percentage' => $per));
  }
}

function wmod_update_ahah() {
  // Standard AHAH stuff.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  // Get the part of the form we're returning.
  $results_fieldset = $form['url']['results'];
  unset($results_fieldset['#prefix'], $results_fieldset['#suffix']);
  $output = theme('status_messages') . drupal_render($results_fieldset);
  drupal_json(array('status' => TRUE, 'data' => $output));
}

function wmod_update_interval() {
  $wmid = isset($_GET['wmid']) ? $_GET['wmid'] : FALSE;
  // Get percentage.
  $per = wmod_get_up_int_per();

  // If we can get result data... get it!
  if ($wmid) {
    $results = wmod_get_results($wmid);
    $msg = "Updating ".$results['updated']." of ".$results['not_updated'];
    drupal_json(array('percentage' => $per, 'message' => $msg));
  }
  else {
    drupal_json(array('percentage' => $per));
  }
}

function wmod_get_scan_int_per() {
  return variable_get('wmod_scan_int', 0);
}

function wmod_set_scan_int_per($wmid) {
  $total = wmod_get_count($wmid, 'type', '"%s"', 'html');
  $scanned = wmod_get_count($wmid, 'scanned', '%d', 1);
  $not_scanned = $total - $scanned;
  if ($not_scanned) {
    $per = (int)(($scanned / $not_scanned) * 100);
  }
  else {
    $per = 100;
  }
  
  variable_set('wmod_scan_int', $per);
}

function wmod_get_up_int_per() {
  return variable_get('wmod_up_int', 0);
}

function wmod_set_up_int_per($wmid) {
  $results = wmod_get_results($wmid);

  if ($results['not_updated']) {
    $per = (int)(($results['updated'] / $results['not_updated']) * 100);
  }
  else {
    $per = 100;
  }
  
  variable_set('wmod_up_int', $per);
}

function wmod_get_results ($wmid) {
  $results = array();
  $results['total'] = wmod_get_count($wmid, 'total');
  $results['imported'] = wmod_get_count($wmid, 'imported', '%d', 1);
  $results['not_imported'] = $results['total'] - $results['imported'];
  $results['scanned'] = wmod_get_count($wmid, 'scanned', '%d', 1);
  $results['not_scanned'] = $results['total'] - $results['scanned'];
  $results['error'] = wmod_get_count($wmid, 'error', '%d', 1);
  $results['html'] = wmod_get_count($wmid, 'type', '"%s"', 'html');
  $results['doc'] = wmod_get_count($wmid, 'type', '"%s"', 'doc');
  $results['img'] = wmod_get_count($wmid, 'type', '"%s"', 'img');

  $fields = array();
  $fields['type'] = array(
    'holder' => '"%s"',
    'val' => 'html',
  );
  $fields['imported'] = array(
    'holder' => '%d',
    'val' => 1,
  );
  $results['updatable'] = wmod_get_count($wmid, $fields);
  $results['updated'] = wmod_get_count($wmid, 'updated', '%d', 1);
  $results['not_updated'] = $results['updatable'] - $results['updated'];

  return $results;
}

function wmod_get_count($wmid, $field, $holder = '', $field_val = ''){
  $field_arr = array();
  $field_args = array();

  // Set wmid first...
  $field_args[] = $wmid;

  // then set everything else
  if (is_array($field)) {
    foreach ($field as $key => $val) {
      $field_arr[] = 'AND w.'.$key.'='.$val['holder'].' ';
      $field_args[] = $val['val'];
    }
  }
  else if ($field != 'total') {
    $field_arr[] = 'AND w.'.$field.'='.$holder.' ';
    $field_args[] = $field_val;
  }

  
  $sql = '';
  $sql .= 'SELECT COUNT(*) ';
  $sql .= 'FROM {wmod_urls} w ';
  $sql .= 'WHERE w.wmid=%d ';
  if ($field != 'total') {
    $sql .= implode('', $field_arr);  
  }
  return db_result(db_query($sql, $field_args));
}

function wmod_access_edit_page($wmid = NULL){
  if (strpos($_GET['q'], 'admin/settings/wmod/') === 0 && is_numeric($wmid)){
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function wmod_update_link($url, $wmid, $data){
  $field_arr = array();
  $field_args = array();
  foreach ($data as $key => $val) {
    $field_arr[] = $key.'='.$val['holder'].' ';
    $field_args[] = $val['val'];
  }
  $field_args[] = $url;
  $field_args[] = $wmid;

  $sql = '';
  $sql .= 'UPDATE {wmod_urls} ';
  $sql .= 'SET '.implode(', ',$field_arr).' ';
  $sql .= 'WHERE path="%s" ';
  $sql .= 'AND wmid=%d ';
  db_query($sql, $field_args);  
}

function wmod_add_links($urls, $wmid) {
  foreach ($urls as $url) {
    $record = wmod_get_url($url['url'], $wmid);
    if (empty($record)) {
      wmod_add_link($url['url'], $wmid, $url['type']);
    }
  }
}

function wmod_add_link ($url, $wmid, $type) {
  $sql = '';
  $sql .= 'INSERT INTO {wmod_urls} ';
  $sql .= '(wmid, path, type) ';
  $sql .= 'VALUES (%d, "%s", "%s") ';
  db_query($sql, $wmid, $url, $type);
}

function wmod_get_html_urls($wmid, $hide_imported = FALSE) {
  $wm = array_shift(wmod_load($wmid));
  $urls = array();

  $sql = '';
  $sql .= 'SELECT w.wmurl_id, w.path ';
  $sql .= 'FROM {wmod_urls} w ';
  $sql .= 'WHERE w.wmid = %d ';
  $sql .= 'AND w.error = 0 ';
  $sql .= 'AND w.type = "html" ';
  if ($hide_imported) {
    $sql .= 'AND w.imported = 0 ';    
  }
  $sql .= 'ORDER BY w.path ';
  $results = pager_query($sql, 20, 0, NULL, $wmid);
  
  while ($result = db_fetch_array($results)) {
      $urls[$result['wmurl_id']] = $result['path'];
  }

  return $urls;
}

function wmod_get_all_paths($wmid, $limit = NULL) {
  $urls = array();

  $sql = '';
  $sql .= 'SELECT w.path ';
  $sql .= 'FROM {wmod_urls} w ';
  $sql .= 'WHERE w.wmid = %d ';
  $sql .= 'AND w.type = "html" ';
  if ($limit) {
    $sql .= 'LIMIT 0,%d ';
    $results = db_query($sql, $wmid, $limit);
  }
  else {
    $results = db_query($sql, $wmid);    
  }
  
  while ($result = db_fetch_array($results)) {
    $urls[] = $result['path'];
  }

  return $urls;
}

function wmod_get_avail_urls($wmid, $limit = NULL) {
  $urls = array();

  $sql = '';
  $sql .= 'SELECT w.path ';
  $sql .= 'FROM {wmod_urls} w ';
  $sql .= 'WHERE w.wmid = %d ';
  $sql .= 'AND w.scanned = 0 ';
  $sql .= 'AND w.error = 0 ';
  $sql .= 'AND w.type = "html" ';
  if ($limit) {
    $sql .= 'LIMIT 0,%d ';
    $results = db_query($sql, $wmid, $limit);
  }
  else {
    $results = db_query($sql, $wmid);    
  }
  
  while ($result = db_fetch_array($results)) {
    $urls[] = $result['path'];
  }

  return $urls;
}

function wmod_get_updatable_urls($wmid, $limit = NULL) {
  $urls = array();

  $sql = '';
  $sql .= 'SELECT w.path ';
  $sql .= 'FROM {wmod_urls} w ';
  $sql .= 'WHERE w.wmid = %d ';
  $sql .= 'AND w.imported = 1 ';
  $sql .= 'AND w.updated = 0 ';
  $sql .= 'AND w.type = "html" ';
  if ($limit) {
    $sql .= 'LIMIT 0,%d ';
    $results = db_query($sql, $wmid, $limit);
  }
  else {
    $results = db_query($sql, $wmid);    
  }
  
  while ($result = db_fetch_array($results)) {
    $urls[] = $result['path'];
  }

  return $urls;
}

function wmod_get_url($lookup, $wmid = NULL) {
  $sql = '';
  $sql .= 'SELECT * ';
  $sql .= 'FROM {wmod_urls} w ';
  if (is_numeric($lookup)) {
    $sql .= 'WHERE w.wmurl_id = %d ';
  }
  else {
    $sql .= 'WHERE w.path = "%s" ';
  }
  if ($wmid) {
    $sql .= 'AND w.wmid = %d ';
  }
  $sql .= 'LIMIT 0,1 ';
  $result = db_fetch_array(db_query($sql, array($lookup, $wmid)));
  return $result;
}

function wmod_load($wmid = NULL){
  if ($wmid == NULL) {
    return array();
  }
  else if ($wmid == 'all') {
    $sql = '';
    $sql .= 'SELECT * ';
    $sql .= 'FROM {wmod} w ';
    $results = db_query($sql);
  }
  else if (is_numeric($wmid)) {
    $sql = '';
    $sql .= 'SELECT * ';
    $sql .= 'FROM {wmod} w ';
    $sql .= 'WHERE w.wmid = %d ';
    $results = db_query($sql, $wmid);
  }

  $wmods = array();
  while ($result = db_fetch_array($results)) {
    $wmod = array();
    $wmod['wmid'] = $result['wmid'];
    $wmod['title'] = $result['title'];
    $wmod['base_url'] = $result['base_url'];
    $wmod['ignore'] = $result['ignore'];
    $wmod['cont_type'] = unserialize($result['content_type_info']);
    
    $wmods[] = $wmod;
  }
  
  return $wmods;
}

function wmod_reset_update_status($wmid) {
  $sql = '';
  $sql .= 'UPDATE {wmod_urls} ';
  $sql .= 'SET updated=0 ';
  $sql .= 'WHERE wmid=%d ';
  db_query($sql, $wmid);
}

function wmod_reset_paths($wmid) {
  $sql = '';
  $sql .= 'DELETE FROM {wmod_urls} ';
  $sql .= 'WHERE wmid=%d ';
  db_query($sql, $wmid);
}

function wmod_delete($wmid) {
  wmod_reset_paths($wmid);
  
  $sql = '';
  $sql .= 'DELETE FROM {wmod} ';
  $sql .= 'WHERE wmid=%d ';
  db_query($sql, $wmid);  
}

